!<arch>
0-isupper.c/    0           0     0     644     250       `
#include "main.h"
#include <stdio.h>
/**
 * _isupper - Checks for uppercaase character
 * @c: character to be checked
 * Return: 1 if uppercase otherwise 0
 */

int _isupper(int c)
{
	if ((c >= 'A') && (c <= 'Z'))
		return (1);
	else
		return (0);
}
0-memset.c/     0           0     0     644     319       `
#include "main.h"

/**
 * _memset - fills memory with constant byte
 * @s: string to be filled
 * @b: constant used to fill in the buffer
 * @n: number of bytes
 *
 * Return: pointer to s
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}

	return (s);
}

0-strcat.c/     0           0     0     644     347       `
#include "main.h"
/**
 * _strcat - concatenates two strings
 *
 * @dest: string to be concatenation
 * @src: string to be concatenated
 * Return: pointer to the resulting string dest
 */

char *_strcat(char *dest, char *src)
{
	int i, j;

	i = 0;
	j = 0;

	while (dest[j++])
	i++;
	for (j = 0; src[j]; j++)
	dest[i++] = src[j];

	return (dest);
}

100-atoi.c/     0           0     0     644     430       `
#include "main.h"
/**
 * _atoi -convert a string to an integer
 * @s: string to be converted
 * Return: A integer
 */

int _atoi(char *s)
{
	int c = 0;
	unsigned int ni = 0;
	int min = 1;
	int isi = 0;

	while (s[c])
	{
		if (s[c] == 45)
		{
			min *= -1;
		}
		while (s[c] >= 48 && s[c] <= 57)
		{
			isi = 1;
			ni = (ni * 10) + (s[c] - '0');
			c++;
		}
		if (isi == 1)
		{
			break;
		}
		c++;
	}
	ni *= min;
	return (ni);
}

1-isdigit.c/    0           0     0     644     247       `
#include "main.h"
#include <stdio.h>
/**
 * _isdigit - checks for a digit(0 through 9)
 * @c: Digit to be checked
 * Return: 1 if c is a digit otherwise 0
 */

int _isdigit(int c)
{
	if ((c >= 48) && (c <= 57))
		return (1);
	else
		return (0);
}

1-memcpy.c/     0           0     0     644     372       `
#include "main.h"
/**
 * _memcpy - function that copies memory area
 * @dest: where memory is being copied to
 * @src: where memory is copied from
 * @n: number of bytes to be copied
 *
 * Return: pointer to the destination
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}

	return (dest);
}
1-strncat.c/    0           0     0     644     336       `
#include "main.h"
#include <string.h>

/**
 * _strncat - concatenates two strings
 * @dest: destination where scr will be concatenated
 * @src: is the source
 * @n: number of chars that will be taken from src
 * Return: results of the concatanation
 */

char *_strncat(char *dest, char *src, int n)
{
	return (strncat(dest, src, n));
}
2-strchr.c/     0           0     0     644     384       `
#include "main.h"
/**
 * _strchr - function that locates a character in a string
 * @s: string to be scanned
 * @c: character to be looked for
 *
 * Return: returns a pointer if character is found,
 * otherwise a NULL
 */

char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
		if (*s == c)
			return (s);
		else if (*(s + 1) == c)
			return (s + 1);
		s++;
	}

	return (s + 1);
}
2-strlen.c/     0           0     0     644     242       `
#include "main.h"
#include <string.h>
/**
 * _strlen - function that returns the length of a string
 *
 * @s: the char to be checked
 * Return: the length of a string
 */

int _strlen(char *s)
{
	int len;

	len = strlen(s);

	return (len);
}
2-strncpy.c/    0           0     0     644     374       `
#include "main.h"
/**
 * _strncpy - a function that copies two strings
 * @dest: destination to copy
 * @src: source to copy
 * @n: amount of places to copy
 * Return: value of dest
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	for (; i < n; i++)
	{
		dest[i] = '\0';
	}
	return (dest);
}
3-islower.c/    0           0     0     644     223       `
#include "main.h"
/**
 *_islower - checks for lowercase characters
 *@c: char to be checked
 *Return: 1 if c is lowercase otherwise 0
 */
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	else
		return (0);
}

3-puts.c/       0           0     0     644     253       `
#include "main.h"

/**
 * _puts - function that prints a spring followed by a new line
 * @str: integer to be printed
 * Return: nothing
 */
void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     400       `
#include "main.h"
/**
 * _strcmp - compares two strings
 * @s1: first string
 * @s2: second string
 *
 * Return: value of string
 */

int _strcmp(char *s1, char *s2)
{
	while (*s1 != '\0' && *s2 != '\0')
	{
		if (*s1 != *s2)
		{
			return (*s1 - *s2);
		}
		s1++;
		s2++;
	}
	if (*s1 == '\0' && *s2 == '\0')
	{
		return (0);
	}
	else if (*s1 == '\0')
	{
		return (-1);
	}
	else
	{
		return (1);
	}
}
3-strspn.c/     0           0     0     644     498       `
#include "main.h"
/**
  * _strspn - function that gets the length of a prefix substring
  * @s: first string to be checked
  * @accept: second string to be compared with
  *
  * Return: length/byte of initial segment
  */
unsigned int _strspn(char *s, char *accept)
{
	int i, j, len = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				len++;
				break;
			}
		}
		if (s[i] != accept[j])
		{
			return (len);
		}
	}
	return (len);
}
4-isalpha.c/    0           0     0     644     255       `
#include "main.h"
/**
 *_isalpha - prints alphabetic character
 *Return: 1 if lowercase or uppercase else 0
 *@c: character for checking
 */

int _isalpha(int c)
{
	if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))
		return (1);
	else
		return (0);
}

4-strpbrk.c/    0           0     0     644     402       `
#include "main.h"
/**
  * _strpbrk - function that searches a string for any set of bytes
  * @s: string to be scanned
  * @accept: string with the character to match
  * Return: pointer to the bytes in s, otherwise NULL
  */

char *_strpbrk(char *s, char *accept)
{
	int i;

	while (*s)
	{
		for (i = 0; accept[i] != '\0'; i++)
		{
			if (*s == accept[i])
				return (s);
		}
		s++;
	}
	return (0);
}
5-strstr.c/     0           0     0     644     486       `
#include "main.h"
#include <stdio.h>

/**
  * _strstr - function that locates substring
  * @haystack: string to be scanned
  * @needle: substring to be checked
  * Return: pointer to the beginning of a located substring
  */

char *_strstr(char *haystack, char *needle)
{
	int i, j;

	for (i = 0; haystack[i] != '\0'; i++)
	{
		for (j = 0; needle[j] != '\0'; j++)
		{
			if (haystack[i + j] != needle[j])
				break;
		}
		if (!needle[j])
			return (&haystack[i]);
	}
	return (NULL);
}
6-abs.c/        0           0     0     644     199       `
#include "main.h"
/**
 *_abs - computes absolute value of an integer
 *@n: the int to be checked
 *Return: the abs of the int
 */

int _abs(int n)
{
	if (n >= 0)
		return (n);
	else
		return (-n);
}

9-strcpy.c/     0           0     0     644     288       `
#include "main.h"
/**
 * _strcpy - copies string pointed by src to dest
 * @src: string to be checked
 * @dest: string to be checked
 * Return: 0
 */

char *_strcpy(char *dest, char *src)
{
	int a;

	for (a = 0; src[a] != '\0'; a++)
		dest[a] = src[a];
	dest[a] = '\0';
	return (dest);
}
main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

